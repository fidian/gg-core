#!/usr/bin/env bash

commandAdd sync cmdSync

cmdSyncHelp() {
    cat <<EOF
   sync            Synchronize local repositories with remotes.  This
                   attempts to rebase and falls back to pull/push.
EOF
}


# Synchronize projects
cmdSync() {
    projectForEach cmdSyncEach
}


# Called for each project that should be synchronized.
#
# If the folder does not exist, this will clone.  After that it always
# synchronizes.
#
# $1 - Project identifier.
#
# Returns true on success, no path, or no remote (none of those are errors
# that should skip all future work).  Otherwise this returns
# cmdSyncSynchronize return codes.
cmdSyncEach() {
    local path remote

    path="$(getProjectConfig "$1" path)"

    if [[ -z "$path" ]]; then
        status "No path set for $1"

        return 0
    fi

    if [[ ! -d "$path" ]]; then
        remote="$(getProjectConfig "$1" remote)"

        if [[ -z "$remote" ]]; then
            status "No remote set for $1"

            return 0
        fi

        status "Cloning $1 into $path"
        git clone "$remote" "$path"
        cmdSyncSynchronize "$path"

        return 0
    fi

    status "Synchronizing $1"
    cmdSyncSynchronize "$path"
}


# Push changes to a remote repository.
#
# Attempts to be intelligent about this and will only push if there are
# commits locally that do not exist in the remote.
#
# Returns nothing.
cmdSyncPush() {
    if ! git log --oneline '@{push}..' > /dev/null 2>&1; then
        # No support for @{push} tag.  Falling back to a blind push.
        git push
    else
        if [[ -z "$(git log --oneline '@{push}..')" ]]; then
            status "No commits to push"
        else
            git push
        fi
    fi
}


# Synchronize a git repository.
#
# First runs a fetch to get the history from the remote repository.  After
# that it will attempt to fast forward, rebase, or merge (in that order).
# Finally, the submodules would be updated.
#
# $1 - Project name from the config
#
# Returns true (0) on success, or non-zero with errors.
cmdSyncSynchronize() {
    (
        local head ref remote remoteBranch remoteRef

        cd "$1"
        ref=$(git symbolic-ref HEAD)
        head=${ref#refs/heads/}
        remote=$(git config "branch.$head.remote" || echo "")

        if [[ -z "$remote" ]]; then
            cat <<EOF
No remote is set for this branch.  Perhaps you should push it first?
EOF
            return 1
        fi

        remoteRef=$(git config "branch.$head.merge")
        remoteBranch=${remoteRef#refs/heads/}

        # Update history
        git fetch
        
        # Attempt to just pull when there's no changes
        if [[ "$(git merge-base "$remote/$remoteBranch" HEAD)" == "$(git rev-parse HEAD)" ]]; then
            git merge --ff "$remote/$remoteBranch"
            git submodule update --init --recursive

            return 0
        fi

        if git rebase "$remote/$remoteBranch"; then
            # Rebase successful
            cmdSyncPush
            git submodule update --init --recursive

            return 0
        fi

        # Fall back to a merge and possibly have merge conflicts
        echo "Rebase failed.  Falling back to a standard merge."
        git rebase --abort || git checkout "$head"

        if git merge "$remote/$remoteBranch"; then
            cmdSyncPush
            git submodule update --init --recursive

            return 0
        fi

        echo ""
        echo "Resolve merge conflicts, commit, then sync again."

        return 2
    )
}
